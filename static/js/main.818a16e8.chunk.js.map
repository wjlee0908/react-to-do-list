{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","TodoItem","props","key","className","todo","isCompleted","onClick","toggleCompleteTodo","index","event","removeTodo","stopPropagation","handleRemoveEvent","text","TodoInput","addTodo","useState","value","setValue","type","placeholder","onChange","e","target","onKeyDown","keyCode","App","todos","setTodos","newTodos","splice","console","log","id","map","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qJAAAA,EAAOC,QAAU,IAA0B,kC,gHCKrCC,G,YAAW,SAACC,GAMhB,OACE,wBAAIC,IAAKD,EAAMC,IAAKC,UAAWF,EAAMG,KAAKC,YAAc,YAAc,GAAIC,QAAS,kBAAML,EAAMM,mBAAmBN,EAAMO,SACxH,0BAAMF,QAAS,SAACG,GAAD,OAPS,SAACA,EAAOD,GAChCP,EAAMS,WAAWF,GACjBC,EAAME,kBAKoBC,CAAkBH,EAAOR,EAAMO,SAAQ,uBAAGL,UAAU,iBAD9E,IACyGF,EAAMG,KAAKS,QAKxH,SAASC,EAAT,GAAiC,IAAZC,EAAW,EAAXA,QAAW,EACJC,mBAAS,IADL,mBACvBC,EADuB,KAChBC,EADgB,KAU9B,OACE,2BACEC,KAAK,OACLC,YAAY,eACZH,MAAOA,EACPI,SAAU,SAACC,GAAD,OAAOJ,EAASI,EAAEC,OAAON,QACnCO,UAbkB,SAACf,GACA,KAAlBA,EAAMgB,UACPV,EAAQE,GACRC,EAAS,QA6DAQ,MA9Cf,WAAgB,IAAD,EACaV,mBACxB,CAAE,CAACH,KAAM,aAAcR,aAAa,GAClC,CAACQ,KAAM,cAAeR,aAAa,GACnC,CAACQ,KAAM,aAAcR,aAAa,KAJzB,mBACNsB,EADM,KACCC,EADD,KAYPrB,EAAqB,SAACC,GAC1B,IAAMqB,EAAQ,YAAOF,GACrBE,EAASrB,GAAOH,aAAgBwB,EAASrB,GAAOH,YAChDuB,EAASC,IAGLnB,EAAa,SAACF,GAClB,IAAMqB,EAAQ,YAAOF,GACrBE,EAASC,OAAOtB,EAAO,GACvBuB,QAAQC,IAAIH,GACZD,EAASC,IAGX,OACE,yBAAK1B,UAAU,QACb,yBAAK8B,GAAG,aACJ,yCAAc,uBAAG9B,UAAU,gBAC3B,kBAACW,EAAD,CAAWC,QAtBH,SAACX,GACf,IAAMyB,EAAQ,sBAAOF,GAAP,CAAc,CAACd,KAAMT,EAAMC,aAAa,KACtDuB,EAASC,MAqBH,4BACKF,EAAMO,KAAI,SAAC9B,EAAMI,GAAP,OACT,kBAAC,EAAD,CACEN,IAAKM,EACLA,MAAOA,EACPJ,KAAMA,EACNG,mBAAsBA,EACtBG,WAAcA,WChEZyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,c","file":"static/js/main.818a16e8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './todos.scss';\n\n\nconst TodoItem = (props) => {\n  const handleRemoveEvent = (event, index) => {\n    props.removeTodo(index)\n    event.stopPropagation();\n  }  \n\n  return (\n    <li key={props.key} className={props.todo.isCompleted ? \"completed\" : \"\"} onClick={() => props.toggleCompleteTodo(props.index)}>\n    <span onClick={(event) => handleRemoveEvent(event, props.index)}><i className=\"fa fa-trash\"></i></span> {props.todo.text}\n    </li>\n  );\n}\n\nfunction TodoInput({ addTodo }) {\n  const [value, setValue] = useState(\"\");\n\n  const handleKeyDown = (event) => {\n    if(event.keyCode === 13) {   // press enter\n      addTodo(value);\n      setValue(\"\");\n    }\n  };\n\n  return (\n    <input\n      type=\"text\"\n      placeholder=\"Add New Todo\" \n      value={value} \n      onChange={(e) => setValue(e.target.value)} \n      onKeyDown={handleKeyDown}\n    />\n  );\n}\n\nfunction App() {\n  const [todos, setTodos] = useState(\n    [ {text: \"First item\", isCompleted: false}, \n      {text: \"Second item\", isCompleted: false}, \n      {text: \"Third item\", isCompleted: false} ]\n    );\n\n  const addTodo = (todo) => {\n    const newTodos = [...todos, {text: todo, isCompleted: false}];\n    setTodos(newTodos);\n  };\n\n  const toggleCompleteTodo = (index) => {\n    const newTodos = [...todos];\n    newTodos[index].isCompleted = !(newTodos[index].isCompleted);\n    setTodos(newTodos);\n  };\n\n  const removeTodo = (index) => {\n    const newTodos = [...todos];\n    newTodos.splice(index, 1);\n    console.log(newTodos);\n    setTodos(newTodos);\n  }\n\n  return (\n    <div className=\"main\">\n      <div id=\"container\">\n          <h1>To-Do List<i className=\"fa fa-plus\"></i></h1>\n          <TodoInput addTodo={addTodo} />\n          <ul>\n              {todos.map((todo, index) => (\n                <TodoItem \n                  key={index}\n                  index={index}\n                  todo={todo}\n                  toggleCompleteTodo = {toggleCompleteTodo}\n                  removeTodo = {removeTodo}\n                />\n              ))}\n          </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}